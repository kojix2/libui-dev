diff --git a/darwin/entry.m b/darwin/entry.m
index 219d08057..b10c2edac 100644
--- a/darwin/entry.m
+++ b/darwin/entry.m
@@ -59,6 +59,8 @@ - (NSSize)intrinsicContentSize
 	NSTextField *textfield;
 	void (*onChanged)(uiEntry *, void *);
 	void *onChangedData;
+	void (*onFinished)(uiEntry *, void *);
+	void *onFinishedData;
 };
 
 static BOOL isSearchField(NSTextField *tf)
@@ -69,6 +71,7 @@ static BOOL isSearchField(NSTextField *tf)
 @interface entryDelegateClass : NSObject<NSTextFieldDelegate> {
 	struct mapTable *entries;
 }
+- (void)controlTextDidEndEditing:(NSNotification *)note;
 - (void)controlTextDidChange:(NSNotification *)note;
 - (IBAction)onSearch:(id)sender;
 - (void)registerEntry:(uiEntry *)e;
@@ -91,17 +94,30 @@ - (void)dealloc
 	[super dealloc];
 }
 
+- (void)controlTextDidEndEditing:(NSNotification *)note
+{
+	uiEntry *e;
+	e = (uiEntry *) mapGet(self->entries, [note object]);
+	(*(e->onFinished))(e, e->onFinishedData);
+}
+
+
 - (void)controlTextDidChange:(NSNotification *)note
 {
-	[self onSearch:[note object]];
+	uiEntry *e;
+	e = (uiEntry *) mapGet(self->entries, [note object]);
+	(*(e->onChanged))(e, e->onChangedData);
 }
 
 - (IBAction)onSearch:(id)sender
 {
 	uiEntry *e;
-
 	e = (uiEntry *) mapGet(self->entries, sender);
+
+	NSSearchField *s;
+	s = (NSSearchField *) (e->textfield);
 	(*(e->onChanged))(e, e->onChangedData);
+	(*(e->onFinished))(e, e->onFinishedData);
 }
 
 - (void)registerEntry:(uiEntry *)e
@@ -155,6 +171,31 @@ void uiEntryOnChanged(uiEntry *e, void (*f)(uiEntry *, void *), void *data)
 	e->onChangedData = data;
 }
 
+// NOTE: for search widgets on OSX, setting OnFinished() alters the behaviour
+// (by setting sendsWholeSearchString).
+// Standard text and password entry widgets are not affected.
+// background:
+// On OSX, there doesn't seem to be any simple way to catch
+// both 'changed' events and 'enter' (finished editing) events on
+// search widgets. Instead, there just a single 'search' event, and flags
+// to determine when it triggers. By default, it triggers after each keypress
+// (with a little delay in case the user is still typing).
+// There's also an option to change the behaviour to trigger only when the
+// enter key is hit, or the search icon is pressed. This is the
+// sendsWholeSearchString flag, and we'll set it if (and only if) OnFinished()
+// is used.
+void uiEntryOnFinished(uiEntry *e, void (*f)(uiEntry *, void *), void *data)
+{
+	e->onFinished = f;
+	e->onFinishedData = data;
+	if (isSearchField(e->textfield)) {
+		NSSearchField *s;
+		s = (NSSearchField *) (e->textfield);
+		// TODO requires OSX >= 10.10  (is that an issue?)
+		[s setSendsWholeSearchString:YES];
+	}
+}
+
 int uiEntryReadOnly(uiEntry *e)
 {
 	return [e->textfield isEditable] == NO;
@@ -175,6 +216,11 @@ static void defaultOnChanged(uiEntry *e, void *data)
 	// do nothing
 }
 
+static void defaultOnFinished(uiEntry *e, void *data)
+{
+	// do nothing
+}
+
 // these are based on interface builder defaults; my comments in the old code weren't very good so I don't really know what talked about what, sorry :/
 void finishNewTextField(NSTextField *t, BOOL isEntry)
 {
@@ -219,8 +265,13 @@ void finishNewTextField(NSTextField *t, BOOL isEntry)
 		[delegates addObject:entryDelegate];
 	}
 	[entryDelegate registerEntry:e];
-	uiEntryOnChanged(e, defaultOnChanged, NULL);
 
+	// set the callbacks directly, so as to not trigger the
+	// sendsWholeSearchString flag set in OnFinished() for search widgets.
+	e->onFinished = defaultOnFinished;
+	e->onFinishedData = NULL;
+	e->onChanged = defaultOnChanged;
+	e->onChangedData = NULL;
 	return e;
 }
 
diff --git a/examples/controlgallery/main.c b/examples/controlgallery/main.c
index c0d536c16..760093298 100644
--- a/examples/controlgallery/main.c
+++ b/examples/controlgallery/main.c
@@ -17,12 +17,27 @@ static int onShouldQuit(void *data)
 	return 1;
 }
 
+
+static void onEntryChanged(uiEntry* e, void* data)
+{
+	const char* msg = data;
+	printf("%s: OnChanged\n", msg);
+}
+
+static void onEntryFinished(uiEntry* e, void* data)
+{
+	const char* msg = data;
+	printf("%s: OnFinished\n", msg);
+}
+
+
 static uiControl *makeBasicControlsPage(void)
 {
 	uiBox *vbox;
 	uiBox *hbox;
 	uiGroup *group;
 	uiForm *entryForm;
+	uiEntry *e;
 
 	vbox = uiNewVerticalBox();
 	uiBoxSetPadded(vbox, 1);
@@ -54,18 +69,30 @@ static uiControl *makeBasicControlsPage(void)
 	uiFormSetPadded(entryForm, 1);
 	uiGroupSetChild(group, uiControl(entryForm));
 
+	e = uiNewEntry();
+	uiEntryOnChanged(e, onEntryChanged, "entry");
+	uiEntryOnFinished(e, onEntryFinished, "entry");
 	uiFormAppend(entryForm,
 		"Entry",
-		uiControl(uiNewEntry()),
+		uiControl(e),
 		0);
+
+	e = uiNewPasswordEntry();
+	uiEntryOnChanged(e, onEntryChanged, "password");
+	uiEntryOnFinished(e, onEntryFinished, "password");
 	uiFormAppend(entryForm,
 		"Password Entry",
-		uiControl(uiNewPasswordEntry()),
+		uiControl(e),
 		0);
+
+	e = uiNewSearchEntry();
+	uiEntryOnChanged(e, onEntryChanged, "search");
+	uiEntryOnFinished(e, onEntryFinished, "search");
 	uiFormAppend(entryForm,
 		"Search Entry",
-		uiControl(uiNewSearchEntry()),
+		uiControl(e),
 		0);
+
 	uiFormAppend(entryForm,
 		"Multiline Entry",
 		uiControl(uiNewMultilineEntry()),
diff --git a/ui.h b/ui.h
index ce3e4104e..99d8c34fa 100644
--- a/ui.h
+++ b/ui.h
@@ -162,6 +162,7 @@ typedef struct uiEntry uiEntry;
 _UI_EXTERN char *uiEntryText(uiEntry *e);
 _UI_EXTERN void uiEntrySetText(uiEntry *e, const char *text);
 _UI_EXTERN void uiEntryOnChanged(uiEntry *e, void (*f)(uiEntry *e, void *data), void *data);
+_UI_EXTERN void uiEntryOnFinished(uiEntry *e, void (*f)(uiEntry *e, void *data), void *data);
 _UI_EXTERN int uiEntryReadOnly(uiEntry *e);
 _UI_EXTERN void uiEntrySetReadOnly(uiEntry *e, int readonly);
 _UI_EXTERN uiEntry *uiNewEntry(void);
diff --git a/unix/entry.c b/unix/entry.c
index 4a9a1d041..20fa0aa00 100644
--- a/unix/entry.c
+++ b/unix/entry.c
@@ -9,6 +9,8 @@ struct uiEntry {
 	void (*onChanged)(uiEntry *, void *);
 	void *onChangedData;
 	gulong onChangedSignal;
+	void (*onFinished)(uiEntry *, void *);
+	void *onFinishedData;
 };
 
 uiUnixControlAllDefaults(uiEntry)
@@ -16,7 +18,6 @@ uiUnixControlAllDefaults(uiEntry)
 static void onChanged(GtkEditable *editable, gpointer data)
 {
 	uiEntry *e = uiEntry(data);
-
 	(*(e->onChanged))(e, e->onChangedData);
 }
 
@@ -25,6 +26,17 @@ static void defaultOnChanged(uiEntry *e, void *data)
 	// do nothing
 }
 
+static void onFinished(GtkEditable *editable, gpointer data)
+{
+	uiEntry *e = uiEntry(data);
+	(*(e->onFinished))(e, e->onFinishedData);
+}
+
+static void defaultOnFinished(uiEntry *e, void *data)
+{
+	// do nothing
+}
+
 char *uiEntryText(uiEntry *e)
 {
 	return uiUnixStrdupText(gtk_entry_get_text(e->entry));
@@ -45,6 +57,13 @@ void uiEntryOnChanged(uiEntry *e, void (*f)(uiEntry *, void *), void *data)
 	e->onChangedData = data;
 }
 
+void uiEntryOnFinished(uiEntry *e, void (*f)(uiEntry *, void *), void *data)
+{
+	e->onFinished = f;
+	e->onFinishedData = data;
+}
+
+
 int uiEntryReadOnly(uiEntry *e)
 {
 	return gtk_editable_get_editable(e->editable) == FALSE;
@@ -73,6 +92,9 @@ static uiEntry *finishNewEntry(GtkWidget *w, const gchar *signal)
 	e->onChangedSignal = g_signal_connect(e->widget, signal, G_CALLBACK(onChanged), e);
 	uiEntryOnChanged(e, defaultOnChanged, NULL);
 
+	g_signal_connect(e->widget, "activate", G_CALLBACK(onFinished), e);
+	uiEntryOnFinished(e, defaultOnFinished, NULL);
+
 	return e;
 }
 
diff --git a/windows/entry.cpp b/windows/entry.cpp
index a7a077f20..9e35f7630 100644
--- a/windows/entry.cpp
+++ b/windows/entry.cpp
@@ -7,19 +7,27 @@ struct uiEntry {
 	void (*onChanged)(uiEntry *, void *);
 	void *onChangedData;
 	BOOL inhibitChanged;
+	void (*onFinished)(uiEntry *, void *);
+	void *onFinishedData;
 };
 
 static BOOL onWM_COMMAND(uiControl *c, HWND hwnd, WORD code, LRESULT *lResult)
 {
 	uiEntry *e = uiEntry(c);
 
-	if (code != EN_CHANGE)
-		return FALSE;
-	if (e->inhibitChanged)
-		return FALSE;
-	(*(e->onChanged))(e, e->onChangedData);
-	*lResult = 0;
-	return TRUE;
+	if (code == EN_CHANGE) {
+    	if (e->inhibitChanged)
+	    	return FALSE;
+    	(*(e->onChanged))(e, e->onChangedData);
+	    *lResult = 0;
+    	return TRUE;
+    }
+	if (code == EN_KILLFOCUS) {
+    	(*(e->onFinished))(e, e->onFinishedData);
+	    *lResult = 0;
+    	return TRUE;
+    }
+    return FALSE;
 }
 
 static void uiEntryDestroy(uiControl *c)
@@ -56,6 +64,11 @@ static void defaultOnChanged(uiEntry *e, void *data)
 	// do nothing
 }
 
+static void defaultOnFinished(uiEntry *e, void *data)
+{
+	// do nothing
+}
+
 char *uiEntryText(uiEntry *e)
 {
 	return uiWindowsWindowText(e->hwnd);
@@ -76,6 +89,12 @@ void uiEntryOnChanged(uiEntry *e, void (*f)(uiEntry *, void *), void *data)
 	e->onChangedData = data;
 }
 
+void uiEntryOnFinished(uiEntry *e, void (*f)(uiEntry *, void *), void *data)
+{
+	e->onFinished = f;
+	e->onFinishedData = data;
+}
+
 int uiEntryReadOnly(uiEntry *e)
 {
 	return (getStyle(e->hwnd) & ES_READONLY) != 0;
@@ -106,6 +125,7 @@ static uiEntry *finishNewEntry(DWORD style)
 
 	uiWindowsRegisterWM_COMMANDHandler(e->hwnd, onWM_COMMAND, uiControl(e));
 	uiEntryOnChanged(e, defaultOnChanged, NULL);
+	uiEntryOnFinished(e, defaultOnFinished, NULL);
 
 	return e;
 }
